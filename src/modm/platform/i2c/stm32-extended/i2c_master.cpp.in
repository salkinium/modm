// coding: utf-8
/*
 * Copyright (c) 2017, 2019 Niklas Hauser
 * Copyright (c) 2017, Sascha Schade
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "i2c_master_{{ id }}.hpp"
#include "i2c_master_hal.hpp"
#include <modm/architecture/interface/interrupt.hpp>


modm::platform::I2cMasterHal hal{ I2C{{ id }} };
// ----------------------------------------------------------------------------
%% if shared_interrupt
MODM_ISR(I2C{{ id }}) { hal.isr_error(); hal.isr_event(); }
%% else
MODM_ISR(I2C{{ id }}_EV) { hal.isr_event(); }
MODM_ISR(I2C{{ id }}_ER) { hal.isr_error(); }
%% endif

// ----------------------------------------------------------------------------

void
modm::platform::I2cMaster{{ id }}::initializeWithPrescaler(uint32_t timingRegisterValue)
{
	// Enable clock
	RCC->APB1ENR{{aid}} |= RCC_APB1ENR{{aid}}_I2C{{ id }}EN;

	// reset module
	RCC->APB1RSTR{{aid}} |=  RCC_APB1RSTR{{aid}}_I2C{{ id }}RST;
	RCC->APB1RSTR{{aid}} &= ~RCC_APB1RSTR{{aid}}_I2C{{ id }}RST;

%% if shared_interrupt
	// Enable Interrupt
	NVIC_SetPriority(I2C{{ id }}_IRQn, 10);
	NVIC_EnableIRQ(I2C{{ id }}_IRQn);
%% else
	// Enable Error Interrupt
	NVIC_SetPriority(I2C{{ id }}_ER_IRQn, 10);
	NVIC_EnableIRQ(I2C{{ id }}_ER_IRQn);
	// Enable Event Interrupt
	NVIC_SetPriority(I2C{{ id }}_EV_IRQn, 10);
	NVIC_EnableIRQ(I2C{{ id }}_EV_IRQn);
%% endif

	hal.initializeWithPrescaler(timingRegisterValue);
}

void
modm::platform::I2cMaster{{ id }}::reset()
{
	hal.reset();
}

bool
modm::platform::I2cMaster{{ id }}::start(I2cTransaction *transaction, ConfigurationHandler handler)
{
	return hal.start(transaction, handler);
}

modm::I2cMaster::Error
modm::platform::I2cMaster{{ id }}::getErrorState()
{
	return hal.error;
}
