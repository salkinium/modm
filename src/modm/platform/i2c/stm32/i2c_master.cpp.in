/*
 * Copyright (c) 2012-2019 Niklas Hauser
 * Copyright (c) 2013, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Sascha Schade
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "i2c_master_{{ id }}.hpp"
#include "i2c_master_hal.hpp"
#include <modm/architecture/interface/interrupt.hpp>

modm::platform::I2cMasterHal hal{ I2C{{ id }} };
MODM_ISR(I2C{{ id }}_EV) { hal.isr_event(); }
MODM_ISR(I2C{{ id }}_ER) { hal.isr_error(); }

void
modm::platform::I2cMaster{{ id }}::initializeWithPrescaler(uint8_t peripheralFrequency, uint8_t riseTime, uint16_t prescaler)
{
	// Enable clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C{{ id }}EN;

	NVIC_SetPriority(I2C{{ id }}_ER_IRQn, 10);
	NVIC_EnableIRQ(I2C{{ id }}_ER_IRQn);
	NVIC_SetPriority(I2C{{ id }}_EV_IRQn, 10);
	NVIC_EnableIRQ(I2C{{ id }}_EV_IRQn);

	hal.initializeWithPrescaler(peripheralFrequency, riseTime, prescaler);
}

void
modm::platform::I2cMaster{{ id }}::reset()
{
	hal.reset();
}

// MARK: - ownership
bool
modm::platform::I2cMaster{{ id }}::start(I2cTransaction *transaction, ConfigurationHandler handler)
{
	return hal.start(transaction, handler);
}

modm::I2cMaster::Error
modm::platform::I2cMaster{{ id }}::getErrorState()
{
	return hal.error;
}
